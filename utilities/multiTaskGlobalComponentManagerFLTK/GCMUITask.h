/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-    */
/* ex: set filetype=cpp softtabstop=4 shiftwidth=4 tabstop=4 cindent expandtab: */

/*
  $Id: GCMUITask.h 952 2009-11-10 00:06:14Z auneri1 $

  Author(s):  Min Yang Jung
  Created on: 2010-02-26

  (C) Copyright 2010 Johns Hopkins University (JHU), All Rights Reserved.

--- begin cisst license - do not edit ---

This software is provided "as is" under an open source license, with
no warranty.  The complete license can be found in license.txt and
http://www.cisst.org/cisst/license.txt.

--- end cisst license ---
*/

#ifndef _GCMUITask_h
#define _GCMUITask_h

#include <cisstMultiTask.h>
#include <cisstOSAbstraction.h>
#include "GlobalComponentManagerUI.h"
#include "multiplot_cisst.h"

#define MAX_CHANNEL_COUNT  12

// FLTK Fl_Browser format code definition
#define FLTK_COLOR_BLACK   0
#define FLTK_COLOR_RED     1
#define FLTK_COLOR_GREEN   2
#define FLTK_COLOR_YELLOW  3
#define FLTK_COLOR_BLUE    4
#define FLTK_COLOR_MAGENTA 5
#define FLTK_COLOR_CYAN    6
#define FLTK_COLOR_WHITE   255

#define FLTK_STYLE_BOLD      'b'
#define FLTK_STYLE_ITALIC    'i'
#define FLTK_STYLE_UNDERLINE 'u'
#define FLTK_STYLE_STRIKE    '-'
#define FLTK_STYLE_LARGE     'l' /* 24pt */
#define FLTK_STYLE_MEDIUM    'm' /* 18pt */
#define FLTK_STYLE_SMALL     's' /* 11pt */
#define FLTK_STYLE_CENTER    'c' /* 11pt */

class GCMUITask: public mtsTaskPeriodic {

    CMN_DECLARE_SERVICES(CMN_NO_DYNAMIC_CREATION, CMN_LOG_LOD_RUN_ERROR);

protected:
    typedef std::vector<std::string> StringVector;

    // Global Component Manager instance that this UI attaches to
    mtsManagerGlobal & GlobalComponentManager;

    //-------------------------------------------------------------------------
    //  Component Inspector
    //-------------------------------------------------------------------------
    // Typedef to remember the last index selected by user. Used for component inspector
    typedef struct {
    public:
        int Process;
        int Component;
        int ProvidedInterface;
        int Command;
        int EventGenerator;
        int RequiredInterface;
        int Function;
        int EventHandler;
        
        void Reset() {
            Process = -1;
            Component = -1;
            ProvidedInterface = -1;
            Command = -1;
            EventGenerator = -1;
            RequiredInterface = -1;
            Function = -1;
            EventHandler = -1;
        }
    } SelectedIndexType;
    SelectedIndexType LastIndexClicked;
    SelectedIndexType CurrentIndexClicked;

    //-------------------------------------------------------------------------
    //  Data Visualizer 
    //-------------------------------------------------------------------------
    // Typedef of an element that contains information about a signal(value) in a parameter 
    typedef struct {
        std::string SignalName;
        bool Hide;
        bool AutoScale;
        double Min;
        double Max;
    } SignalState;

    // Typedef of an element that contains information about a command that user 
    // picks up for visualization.
    class CommandSelected {
    public:
        std::string CommandName;
        std::vector<SignalState> Signals;
        std::string ProcessName;
        std::string ComponentName;
        std::string InterfaceName;
        std::string ArgumentName;
        int SamplingRate;

        double Timeout;
        double LastTimeFetched;

        void Refresh() {
            LastTimeFetched = osaGetTime(); // current tick in sec (double) 
        }

        // Set timer timeout in sec
        void SetTimeout(const double timeout) {
            Timeout = osaGetTime() + timeout;
        }

        bool IsExpired() const {
            return (osaGetTime() > Timeout);
        }
    };

    // List of commands which are currently plotted
    std::vector<CommandSelected*> CommandsBeingPlotted;

    // X-axis scaling factor
    int XAxisScaleFactor;

    // Timer to control refresh rate
    clock_t LastUpdateTime;

    // FLTK UI resources
    Fl_Progress * ProgressBars[MAX_CHANNEL_COUNT];
    MULTIPLOT * GraphPane;
    
    // User interface generated by FTLK/fluid
public:
    GlobalComponentManagerUI UI;

protected:
    //-------------------------------------------------------------------------
    //  Update UI Check
    //-------------------------------------------------------------------------
    // Update overall UI
    void UpdateUI(void);
    // Check user's input on the 'Component Inspector' tab
    void CheckComponentInspectorInput(void);
    // Check user's input on the 'Data Visualizer' tab
    void CheckDataVisualizerInput(void);

    //-------------------------------------------------------------------------
    //  Component Inspector
    //-------------------------------------------------------------------------
    // Populate browsers
    void PopulateComponents(const std::string & processName);
    void PopulateProvidedInterfaces(const std::string & processName, 
                                    const std::string & componentName);
    void PopulateCommands(const std::string & processName, 
                          const std::string & componentName, 
                          const std::string & providedInterfaceName);
    void PopulateEventGenerators(const std::string & processName, 
                                 const std::string & componentName, 
                                 const std::string & providedInterfaceName);
    void PopulateRequiredInterfaces(const std::string & processName, 
                                    const std::string & componentName);
    void PopulateFunctions(const std::string & processName, 
                           const std::string & componentName,
                           const std::string & requiredInterfaceName);
    void PopulateEventHandlers(const std::string & processName, 
                               const std::string & componentName, 
                               const std::string & requiredInterfaceName);

    // Show detailed information
    void ShowCommandDescription(const std::string & processName, 
                                const std::string & componentName, 
                                const std::string & providedInterfaceName, 
                                const std::string & commandName);
    void ShowEventGeneratorDescription(const std::string & processName, 
                                       const std::string & componentName, 
                                       const std::string & providedInterfaceName, 
                                       const std::string & eventGeneratorName);
    void ShowFunctionDescription(const std::string & processName, 
                                 const std::string & componentName, 
                                 const std::string & requiredInterfaceName, 
                                 const std::string & functionName);
    void ShowEventHandlerDescription(const std::string & processName, 
                                     const std::string & componentName, 
                                     const std::string & requiredInterfaceName, 
                                     const std::string & eventHandlerName);

    // UI Event Handler
    void OnButtonRefreshClicked(void);

    //-------------------------------------------------------------------------
    //  Data Visualizer
    //-------------------------------------------------------------------------
    void PlotGraph(void);
    // UI Event Handler
    void OnButtonVisualizeClicked(const int idxClicked);
    void OnButtonYScaleUpClicked(void);
    void OnButtonYScaleDownClicked(void);
    void OnButtonXScaleUpClicked(void);
    void OnButtonXScaleDownClicked(void);
    void OnButtonRemoveClicked(void);
    void OnButtonRemoveAllClicked(void);
    void OnButtonUpdateClicked(void);
    void OnButtonAutoScaleClicked(void);
    void OnButtonHideClicked(void);

    void OnBrowserVisualizeCommandNameClicked(void);
    void OnBrowserVisualizeSignalsClicked(void);

    // Reset UI
    void ResetBrowserVisualizeCommandName(void);
    void ResetBrowserVisualizeSignals(void);
    void ResetDataVisualizerUI(const bool exceptCommandNameBrowser = false);

    // Add command selected to the CommandsSelected list
    void AddCommandSelected(const CommandSelected& commandSelected);

    // Fetch/sample current values that user has chosen to visualize
    void FetchCurrentValues(void);

    // Draw graph
    void DrawGraph(const mtsManagerLocalInterface::SetOfValues & values);

    //-------------------------------------------------------------------------
    //  Utilities
    //-------------------------------------------------------------------------
    std::string StripOffFormatCharacters(const std::string & text);

    void AddLineToBrowser(Fl_Browser * browser, 
                          const char * line, 
                          const int fg = FLTK_COLOR_BLACK, 
                          const int bg = FLTK_COLOR_WHITE, 
                          const char style = '0');
    void AddLineToDescription(Fl_Output * output, const char * msg);

public:
    // Constructor and destructor
    GCMUITask(const std::string & taskName, const double period, mtsManagerGlobal& globalComponentManager);
    ~GCMUITask() {};

    void Configure(const std::string & CMN_UNUSED(filename) = "");
    void Startup(void);
    void Run(void);
    void Cleanup(void) {};
};

CMN_DECLARE_SERVICES_INSTANTIATION(GCMUITask);

#endif // _GCMUITask_h
