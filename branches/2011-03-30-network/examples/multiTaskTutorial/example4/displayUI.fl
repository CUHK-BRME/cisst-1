# data file for the Fltk User Interface Designer (fluid)
version 1.0
header_name {.h} 
code_name {.cxx}
class displayUI {open
} {
  Function {displayUI()} {open
  } {
    Fl_Window DisplayWindow {
      label DisplayWindow open
      xywh {1338 111 254 269} type Double visible
    } {
      Fl_Value_Output Data {
        label {Data:}
        xywh {25 125 75 25} box THIN_DOWN_BOX align 5
      }
      Fl_Return_Button Close {
        label Close
        callback {DisplayWindow->hide();
Closed = true;}
        tooltip {Quit the application} xywh {30 225 75 25} box THIN_UP_BOX
      }
      Fl_Dial Amplitude {
        label {Amplitude:}
        callback {AmplitudeChanged = true;}
        tooltip {Modify amplitude used by the sine wave generator} xywh {25 25 75 75} box OSHADOW_BOX color 1 align 1
      }
      Fl_Dial Trigger {
        label {Trigger:}
        callback {TriggerChanged = true;}
        tooltip {Modify amplitude used to trigger wakeup} xywh {145 25 75 75} box OSHADOW_BOX color 109 align 1 minimum -1
      }
      Fl_Check_Button WaitForTrigger {
        label Wait
        callback {TriggerWaitChanged = true;}
        tooltip {Wait until the sine wave has reached the trigger value} xywh {155 143 64 15} down_box DOWN_BOX
      }
      Fl_Button Reset {
        label Reset
        callback {DoReset = true;}
        xywh {155 113 64 20}
      }
      Fl_Value_Output Time {
        label {Time:}
        xywh {65 170 155 25}
      }
    }
    code {AmplitudeChanged = false;} {}
    code {TriggerChanged = false;} {}
    code {TriggerWaitChanged = false;} {}
    code {DoReset = false;} {}
    code {Closed = false;} {}
  }
  Function {show(int argc, char**argv)} {open
  } {
    code {bool done = false;
while (!done) {
    if (!Semaphore) {
        Semaphore = true;
        DisplayWindow->show();
        done = true;
        Semaphore = false;
    }
}} {}
  }
  decl {bool AmplitudeChanged;} {public
  }
  decl {bool TriggerChanged;} {public
  }
  decl {bool TriggerWaitChanged;} {public
  }
  decl {bool DoReset;} {public
  }
  decl {bool Closed;} {public
  }
  decl {static bool Semaphore;} {public
  }
} 
