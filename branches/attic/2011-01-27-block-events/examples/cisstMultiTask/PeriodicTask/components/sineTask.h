/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-    */
/* ex: set filetype=cpp softtabstop=4 shiftwidth=4 tabstop=4 cindent expandtab: */
/*
  $Id$

  Author(s):  Ankur Kapoor, Peter Kazanzides, Anton Deguet
  Created on: 2004-04-30

  (C) Copyright 2004-2011 Johns Hopkins University (JHU), All Rights
  Reserved.

--- begin cisst license - do not edit ---

This software is provided "as is" under an open source license, with
no warranty.  The complete license can be found in license.txt and
http://www.cisst.org/cisst/license.txt.

--- end cisst license ---

*/

#ifndef _sineTask_h
#define _sineTask_h

// include for the whole cisstMultiTask library
#include <cisstMultiTask.h>

class sineTask: public mtsTaskPeriodic {
    // used to control the log level, "Run Error" by default
    CMN_DECLARE_SERVICES(CMN_NO_DYNAMIC_CREATION, CMN_LOG_LOD_RUN_ERROR);
 protected:

    // macros used by the cisst component generator
    MTS_DECLARE_COMPONENT(sineTask, mtsTaskPeriodic);

    // data generated by the sine wave generator, type & name
    MTS_STATE_TABLE_BEGIN;
    MTS_STATE_TABLE_DATA(mtsDouble, SineData);
    MTS_STATE_TABLE_END;

    // declaration of interface and available commands
    MTS_INTERFACE_PROVIDED_BEGIN(MainInterface);
    MTS_COMMAND_WRITE(SetAmplitude, "SetAmplitude", mtsDouble(1.0));
    MTS_COMMAND_STATEREAD(SineData, "GetData");
    MTS_COMMAND_WRITE(SetTriggerThreshold, "SetTriggerThreshold", mtsDouble(0.0));
    MTS_COMMAND_VOID(ResetTrigger, "ResetTrigger");
    MTS_EVENT_VOID(TriggerEvent, "TriggerEvent");
    MTS_INTERFACE_PROVIDED_END(MainInterface);

    // amplitude of the sine wave, not stored in state table
    double SineAmplitude;
    // trigger threshold, i.e. when the data generated reaches this value
    // an event is generated.
    double TriggerThreshold;

    // internal methods used for the provided commands
    void SetAmplitude(const mtsDouble & amplitude);
    void SetTriggerThreshold(const mtsDouble & value);
    void ResetTrigger(void);

    // internal flag
    bool TriggerEnabled;

 public:
    // provide a name for the task and define the frequency (time
    // interval between calls to the periodic Run).  Also used to
    // populate the interface(s)
    sineTask(const std::string & taskName, double period);
    ~sineTask() {};
    // all four methods are pure virtual in mtsTask
    void Configure(const std::string & CMN_UNUSED(filename)) {};
    void Startup(void);    // set some initial values
    void Run(void);        // performed periodically
    void Cleanup(void) {}; // user defined cleanup
};

CMN_DECLARE_SERVICES_INSTANTIATION(sineTask);

#endif // _sineTask_h
